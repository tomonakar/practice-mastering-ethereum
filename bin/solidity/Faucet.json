{
    "contractName": "Faucet",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "withdraw_amount",
                    "type": "uint256"
                }
            ],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdraw_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/staff018/practice/practice-mastering-ethereum/solidity/faucet.sol\":\"Faucet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/staff018/practice/practice-mastering-ethereum/solidity/faucet.sol\":{\"keccak256\":\"0x9640b1c80384e177b8a3b4420d1d301fb447404eb719aae3d73b1d794ed1164f\",\"urls\":[\"bzz-raw://acd76dc79b837d99fdc84459334e491b5442898afcdb9d48602fa985141486d3\",\"dweb:/ipfs/QmVmyMGGpJ2Mg6GwasqDBT9nytUnurAhKrnoWHsP2gDkT4\"]}},\"version\":1}",
    "bytecode": "608060405234801561001057600080fd5b5060cc8061001f6000396000f3fe608060405260043610601f5760003560e01c80632e1a7d4d14602a576025565b36602557005b600080fd5b348015603557600080fd5b50605060048036036020811015604a57600080fd5b50356052565b005b67016345785d8a0000811115606657600080fd5b604051339082156108fc029083906000818181858888f193505050501580156092573d6000803e3d6000fd5b505056fea264697066735822122035ad3d42aa1b8ef3c255df564d6218715a773f10fa12c68a77c294b1bfe3979c64736f6c63430007050033",
    "deployedBytecode": "608060405260043610601f5760003560e01c80632e1a7d4d14602a576025565b36602557005b600080fd5b348015603557600080fd5b50605060048036036020811015604a57600080fd5b50356052565b005b67016345785d8a0000811115606657600080fd5b604051339082156108fc029083906000818181858888f193505050501580156092573d6000803e3d6000fd5b505056fea264697066735822122035ad3d42aa1b8ef3c255df564d6218715a773f10fa12c68a77c294b1bfe3979c64736f6c63430007050033",
    "sourceMap": "60:389:0:-:0;;;;;;;;;;;;;;;;;;;",
    "deployedSourceMap": "60:389:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;192:255;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;192:255:0;;:::i;:::-;;;314:18;295:15;:37;;287:46;;;;;;404:36;;:10;;:36;;;;;424:15;;404:36;;;;424:15;404:10;:36;;;;;;;;;;;;;;;;;;;;;192:255;:::o",
    "sourcePath": "/Users/staff018/practice/practice-mastering-ethereum/solidity/faucet.sol",
    "compiler": {
        "name": "solc",
        "version": "0.7.5+commit.eb77ed08"
    },
    "ast": {
        "absolutePath": "/Users/staff018/practice/practice-mastering-ethereum/solidity/faucet.sol",
        "exportedSymbols": {
            "Faucet": [
                26
            ]
        },
        "id": 27,
        "nodeType": "SourceUnit",
        "nodes": [
            {
                "id": 1,
                "literals": [
                    "solidity",
                    "^",
                    "0.7",
                    ".0"
                ],
                "nodeType": "PragmaDirective",
                "src": "0:23:0"
            },
            {
                "abstract": false,
                "baseContracts": [],
                "contractDependencies": [],
                "contractKind": "contract",
                "fullyImplemented": true,
                "id": 26,
                "linearizedBaseContracts": [
                    26
                ],
                "name": "Faucet",
                "nodeType": "ContractDefinition",
                "nodes": [
                    {
                        "body": {
                            "id": 4,
                            "nodeType": "Block",
                            "src": "143:2:0",
                            "statements": []
                        },
                        "id": 5,
                        "implemented": true,
                        "kind": "receive",
                        "modifiers": [],
                        "name": "",
                        "nodeType": "FunctionDefinition",
                        "parameters": {
                            "id": 2,
                            "nodeType": "ParameterList",
                            "parameters": [],
                            "src": "123:2:0"
                        },
                        "returnParameters": {
                            "id": 3,
                            "nodeType": "ParameterList",
                            "parameters": [],
                            "src": "143:0:0"
                        },
                        "scope": 26,
                        "src": "116:29:0",
                        "stateMutability": "payable",
                        "virtual": false,
                        "visibility": "external"
                    },
                    {
                        "body": {
                            "id": 24,
                            "nodeType": "Block",
                            "src": "242:205:0",
                            "statements": [
                                {
                                    "expression": {
                                        "arguments": [
                                            {
                                                "commonType": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                },
                                                "id": 13,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                    "id": 11,
                                                    "name": "withdraw_amount",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 7,
                                                    "src": "295:15:0",
                                                    "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                    }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "<=",
                                                "rightExpression": {
                                                    "hexValue": "313030303030303030303030303030303030",
                                                    "id": 12,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": true,
                                                    "kind": "number",
                                                    "lValueRequested": false,
                                                    "nodeType": "Literal",
                                                    "src": "314:18:0",
                                                    "typeDescriptions": {
                                                        "typeIdentifier": "t_rational_100000000000000000_by_1",
                                                        "typeString": "int_const 100000000000000000"
                                                    },
                                                    "value": "100000000000000000"
                                                },
                                                "src": "295:37:0",
                                                "typeDescriptions": {
                                                    "typeIdentifier": "t_bool",
                                                    "typeString": "bool"
                                                }
                                            }
                                        ],
                                        "expression": {
                                            "argumentTypes": [
                                                {
                                                    "typeIdentifier": "t_bool",
                                                    "typeString": "bool"
                                                }
                                            ],
                                            "id": 10,
                                            "name": "require",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [
                                                -18,
                                                -18
                                            ],
                                            "referencedDeclaration": -18,
                                            "src": "287:7:0",
                                            "typeDescriptions": {
                                                "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                                                "typeString": "function (bool) pure"
                                            }
                                        },
                                        "id": 14,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "287:46:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                            "typeIdentifier": "t_tuple$__$",
                                            "typeString": "tuple()"
                                        }
                                    },
                                    "id": 15,
                                    "nodeType": "ExpressionStatement",
                                    "src": "287:46:0"
                                },
                                {
                                    "expression": {
                                        "arguments": [
                                            {
                                                "id": 21,
                                                "name": "withdraw_amount",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 7,
                                                "src": "424:15:0",
                                                "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                }
                                            }
                                        ],
                                        "expression": {
                                            "argumentTypes": [
                                                {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                }
                                            ],
                                            "expression": {
                                                "expression": {
                                                    "id": 16,
                                                    "name": "msg",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": -15,
                                                    "src": "404:3:0",
                                                    "typeDescriptions": {
                                                        "typeIdentifier": "t_magic_message",
                                                        "typeString": "msg"
                                                    }
                                                },
                                                "id": 19,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "sender",
                                                "nodeType": "MemberAccess",
                                                "src": "404:10:0",
                                                "typeDescriptions": {
                                                    "typeIdentifier": "t_address_payable",
                                                    "typeString": "address payable"
                                                }
                                            },
                                            "id": 20,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "transfer",
                                            "nodeType": "MemberAccess",
                                            "src": "404:19:0",
                                            "typeDescriptions": {
                                                "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                                                "typeString": "function (uint256)"
                                            }
                                        },
                                        "id": 22,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "404:36:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                            "typeIdentifier": "t_tuple$__$",
                                            "typeString": "tuple()"
                                        }
                                    },
                                    "id": 23,
                                    "nodeType": "ExpressionStatement",
                                    "src": "404:36:0"
                                }
                            ]
                        },
                        "functionSelector": "2e1a7d4d",
                        "id": 25,
                        "implemented": true,
                        "kind": "function",
                        "modifiers": [],
                        "name": "withdraw",
                        "nodeType": "FunctionDefinition",
                        "parameters": {
                            "id": 8,
                            "nodeType": "ParameterList",
                            "parameters": [
                                {
                                    "constant": false,
                                    "id": 7,
                                    "mutability": "mutable",
                                    "name": "withdraw_amount",
                                    "nodeType": "VariableDeclaration",
                                    "scope": 25,
                                    "src": "210:23:0",
                                    "stateVariable": false,
                                    "storageLocation": "default",
                                    "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                    },
                                    "typeName": {
                                        "id": 6,
                                        "name": "uint256",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "210:7:0",
                                        "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                        }
                                    },
                                    "visibility": "internal"
                                }
                            ],
                            "src": "209:25:0"
                        },
                        "returnParameters": {
                            "id": 9,
                            "nodeType": "ParameterList",
                            "parameters": [],
                            "src": "242:0:0"
                        },
                        "scope": 26,
                        "src": "192:255:0",
                        "stateMutability": "nonpayable",
                        "virtual": false,
                        "visibility": "public"
                    }
                ],
                "scope": 27,
                "src": "60:389:0"
            }
        ],
        "src": "0:450:0"
    },
    "functionHashes": {
        "withdraw(uint256)": "2e1a7d4d"
    },
    "gasEstimates": {
        "creation": {
            "codeDepositCost": "40800",
            "executionCost": "93",
            "totalCost": "40893"
        },
        "external": {
            "withdraw(uint256)": "infinite"
        }
    }
}